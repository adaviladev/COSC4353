import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import java.io.*;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;

public class XMLParser {

	private ArrayList<Rate> ratesList;
	private StringBuffer response;

	XMLParser() {
		this.ratesList = new ArrayList<Rate>();
	}

	private void readXML() {
		String href = "http://rates.fxcm.com/RatesXML";
		URL url;
		HttpURLConnection connection = null;
		try {
			url = new URL( href );
			connection = (HttpURLConnection)url.openConnection();
			connection.setRequestProperty( "User-Agent", "Mozilla/5.0 (Windows NT 5.1) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11");

			InputStream is = connection.getInputStream();
			BufferedReader reader = new BufferedReader( new InputStreamReader( is ) );
			String line;
			response = new StringBuffer();
			while( ( line = reader.readLine()) != null ) {
				response.append( line );
				response.append( '\n' );

			}

			reader.close();

		} catch( MalformedURLException urlException ) {
			System.out.println( "Invalid URL" );
			System.out.println( urlException.getMessage() );
		} catch( IOException ioException ) {
			System.out.println( "Invalid Input" );
			System.out.println( ioException.getMessage() );
		}
	}

	public ArrayList<Rate> getList() {
		readXML();
		try{
			String xmlString = this.response.toString();
			DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
			DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
			Node document = documentBuilder.parse( new InputSource( new StringReader( xmlString ) ) );


			NodeList nodeList = document.getChildNodes().item( 0 ).getChildNodes();

			for( int temp = 0; temp < nodeList.getLength(); temp++ ) {
				Node node = nodeList.item( temp );

				//System.out.println( "\nCurrent Element: " + node.getNodeName() );

				if( node.getNodeType() == Node.ELEMENT_NODE ) {
					Rate rate = new Rate();
					Element element = (Element)node;
					rate.symbol = element.getAttribute( "Symbol" ) ;
					rate.bid = Float.parseFloat( element.getElementsByTagName( "Bid" ).item( 0 ).getTextContent() );
					rate.ask = Float.parseFloat( element.getElementsByTagName( "Ask" ).item( 0 ).getTextContent() );
					rate.high = Float.parseFloat( element.getElementsByTagName( "High" ).item( 0 ).getTextContent() );
					rate.low = Float.parseFloat( element.getElementsByTagName( "Low" ).item( 0 ).getTextContent() );
					rate.direction = Integer.parseInt( element.getElementsByTagName( "Direction" ).item( 0 ).getTextContent() );
					rate.last = element.getElementsByTagName( "Last" ).item( 0 ).getTextContent();
					this.ratesList.add( rate );
				}

			}

			System.out.println( "\nRatesList Length : " + this.ratesList.size() );
		} catch( Exception e ) {
			e.printStackTrace();
		}
		System.out.println( "hit" );


		return ratesList;
	}

}
